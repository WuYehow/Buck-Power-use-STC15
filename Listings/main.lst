C51 COMPILER V9.56.0.0   MAIN                                                              06/03/2018 22:40:57 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\keil\keil_51\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXT
                    -END PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc15.h"
   2          #include "stc_adc.h"
   3          
   4          // PWM周期为T0溢出时间，输出为P3.6。
   5          
   6          #define MAIN_Fosc 24000000UL  //定义主时钟
   7          
   8          #define PWM_HIGH_MIN  10.0      //限制PWM输出的最小占空比。
   9          #define PWM_HIGH_MAX  90.0      //限制PWM输出的最大占空比。
  10          
  11          #define CCP_S0 0x10                 //P_SW1.4
  12          #define CCP_S1 0x20                 //P_SW1.5
  13          
  14          #define VOL_BATTERY 1
  15          
  16          unsigned int voltage_battery;
  17          
  18          int Int_term_Buck;
  19          unsigned int Kp = 30;
  20          unsigned int Ki = 15;
  21          
  22          /*
  23          void  delay_ms(unsigned int ms)
  24          {
  25               unsigned int i;
  26             do{
  27                i = MAIN_Fosc / 13000;
  28                while(--i);
  29               }while(--ms);
  30          }
  31          */
  32          
  33          void UartSend(unsigned char uart_data)
  34          {
  35   1        SBUF = uart_data;
  36   1        while(TI == 0);  //等待发送完成
  37   1        TI = 0;
  38   1      }
  39          /*
  40          void UartSendStr(unsigned char uartsend_str[])
  41          {
  42            while(*uartsend_str != '\0')
  43            {
  44              UartSend(*uartsend_str++);
  45              UartSend('\n'); //换行
  46            }
  47          }
  48          */
  49          void UartSendInt(unsigned int uartsend_int)
  50          {
  51   1        unsigned char uartsendint[5],
  52   1                      i = 0;
  53   1        do {
  54   2          uartsendint[i++]=(48 + uartsend_int % 10);
C51 COMPILER V9.56.0.0   MAIN                                                              06/03/2018 22:40:57 PAGE 2   

  55   2          uartsend_int = uartsend_int / 10;
  56   2        } while(uartsend_int);
  57   1        do {
  58   2          UartSend(uartsendint[--i]);
  59   2        } while(i != 0);
  60   1        UartSend('\n'); //换行
  61   1      }
  62          
  63          void GetVolBattery(void)
  64          {
  65   1        voltage_battery = (float)ADC_GetVoltage(VOL_BATTERY) * 3.06; //* VOL_BATTERY_ACTUAL / VOL_BATTERY_SAMPLE
             -;
  66   1      }
  67          
  68          void Timer0Init(void)    //pwm频率25khz。
  69          {
  70   1        AUXR |= 0x80;    //定时器时钟1T模式
  71   1        TMOD &= 0xF0;    //设置定时器模式
  72   1        TL0 = 0xFC;    //设置定时初值
  73   1        TH0 = 0xFF;    //设置定时初值
  74   1        TF0 = 0;    //清除TF0标志
  75   1        TR0 = 1;    //定时器0开始计时
  76   1      }
  77          
  78          void InitUart()
  79          {
  80   1        SCON = 0x50;       //设置串口为8位可变波特率
  81   1        T2L = 0x8F;        //设定定时初值
  82   1        T2H = 0xFD;        //设定定时初值
  83   1        AUXR |= 0x04;       //T2为1T模式, 并启动定时器2
  84   1        AUXR |= 0x01;      //选择定时器2为串口1的波特率发生器
  85   1        AUXR |= 0x10;
  86   1        ES = 1;            //开串口中断
  87   1      }
  88          
  89          void PWM_Update(float pwm_duty)
  90          {
  91   1        unsigned int pwm_low;
  92   1        if(pwm_duty > PWM_HIGH_MAX)  
  93   1          pwm_duty = PWM_HIGH_MAX;  //如果写入大于最大占空比数据，强制为最大占空比。
  94   1        if(pwm_duty < PWM_HIGH_MIN)  
  95   1          pwm_duty = PWM_HIGH_MIN;  //如果写入小于最小占空比数据，强制为最小占空比。
  96   1      // 计算占空比对应的脉冲
  97   1        pwm_low = 255 - (255 * pwm_duty / 100);
  98   1        //CR = 0;            //停止PCA。
  99   1        CCAP1H = CCAP1L = pwm_low;
 100   1        //CR = 1;            //启动PCA。
 101   1      }
 102          
 103          void PCA_Init(void)
 104          {
 105   1        ACC = P_SW1;
 106   1        ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=1 CCP_S1=0
 107   1        ACC |= CCP_S0;                  //(P1.2/ECI, P1.1/CCP0, P1.0/CCP1, P3.7/CCP2)
 108   1        P_SW1 = ACC;
 109   1      
 110   1        CR = 0;
 111   1        CL = 0; // 清空PCA寄存器
 112   1        CH = 0;
 113   1        CMOD = 0x04; // 频率为T0溢出脉冲
 114   1        PCA_PWM1 = 0X00; // PCA模块2工作于8位PWM模式
 115   1        CCAPM1 = 0x42; //PCA模块2工作于8位PWM模式,无中断
C51 COMPILER V9.56.0.0   MAIN                                                              06/03/2018 22:40:57 PAGE 3   

 116   1        PWM_Update(50.0);
 117   1        CR = 1;  // 运行PCA定时器
 118   1      }
 119          
 120          void Buck_PI_Init(void)
 121          {
 122   1        Int_term_Buck = 0;
 123   1      }
 124          
 125          float Buck_PI(unsigned int vol_rel, unsigned int vol_set)
 126          {
 127   1        float PI_out,
 128   1              Ek,
 129   1              Up,
 130   1              Ui;
 131   1        Ek = vol_rel - vol_set;
 132   1        Up = (-Kp * Ek) / 200;
 133   1        Ui = (-Ki * Ek) / 200;
 134   1        Int_term_Buck += Ui;
 135   1        PI_out = Int_term_Buck + Up + 50.0;
 136   1        return PI_out;
 137   1      }
 138          
 139          void main(void)
 140          {
 141   1        unsigned int i;
 142   1        Timer0Init();
 143   1        InitUart();
 144   1        PCA_Init();  //PCA初始化
 145   1        InitADC();
 146   1        Buck_PI_Init();
 147   1        EA = 1;
 148   1        P3M1 = 0x00;
 149   1        P3M0 = 0x40; //P3.6为推挽输出
 150   1        P1M1 = 0xFF;  // AD口设置为高阻
 151   1        P1M0 = 0x00;
 152   1        UartSendInt(1123);
 153   1        while (1)
 154   1        {
 155   2          if(i == 65530)
 156   2            {  
 157   3            GetVolBattery();
 158   3            UartSendInt(voltage_battery);
 159   3            i = 0;
 160   3            }
 161   2          i++;
 162   2        }
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    555    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
